[{"D:\\Desktop\\Web\\to-do-list\\toDoList\\src\\index.js":"1","D:\\Desktop\\Web\\to-do-list\\toDoList\\src\\reportWebVitals.js":"2","D:\\Desktop\\Web\\to-do-list\\toDoList\\src\\App.js":"3","D:\\Desktop\\Web\\to-do-list\\toDoList\\src\\components\\Header\\Header.jsx":"4","D:\\Desktop\\Web\\to-do-list\\toDoList\\src\\components\\toDoList\\ToDiListContainer.jsx":"5","D:\\Desktop\\Web\\to-do-list\\toDoList\\src\\components\\toDoList\\ToDoList.jsx":"6","D:\\Desktop\\Web\\to-do-list\\toDoList\\src\\components\\toDoList\\task\\Task.jsx":"7","D:\\Desktop\\Web\\to-do-list\\toDoList\\src\\components\\Redux\\store.js":"8","D:\\Desktop\\Web\\to-do-list\\toDoList\\src\\components\\fieldLevelValidation\\validation.js":"9"},{"size":792,"mtime":1609941762460,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1607157020068,"results":"12","hashOfConfig":"11"},{"size":506,"mtime":1609941762425,"results":"13","hashOfConfig":"11"},{"size":626,"mtime":1609941762426,"results":"14","hashOfConfig":"11"},{"size":884,"mtime":1609941762430,"results":"15","hashOfConfig":"11"},{"size":4334,"mtime":1609941762430,"results":"16","hashOfConfig":"11"},{"size":3331,"mtime":1609941830998,"results":"17","hashOfConfig":"11"},{"size":3515,"mtime":1609941762428,"results":"18","hashOfConfig":"11"},{"size":532,"mtime":1609941762429,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1okj19x",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},"D:\\Desktop\\Web\\to-do-list\\toDoList\\src\\index.js",[],"D:\\Desktop\\Web\\to-do-list\\toDoList\\src\\reportWebVitals.js",[],["42","43"],"D:\\Desktop\\Web\\to-do-list\\toDoList\\src\\App.js",[],"D:\\Desktop\\Web\\to-do-list\\toDoList\\src\\components\\Header\\Header.jsx",[],"D:\\Desktop\\Web\\to-do-list\\toDoList\\src\\components\\toDoList\\ToDiListContainer.jsx",[],"D:\\Desktop\\Web\\to-do-list\\toDoList\\src\\components\\toDoList\\ToDoList.jsx",["44","45","46","47","48","49"],"import React, { useState } from 'react'\r\nimport styles from './ToDoList.module.css'\r\nimport Task from './task/Task'\r\nimport { Field } from 'redux-form'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { required } from '../fieldLevelValidation/validation';\r\n\r\nexport const renderField = ({ input, type, meta: { submitFailed, error, warning },} ) => {\r\n    return (\r\n        <div className={styles.inputForm_container}>\r\n            <div>\r\n                <textarea {...input} type={type} className={styles.inputForm} placeholder='Напишите новую задачу' />\r\n            </div>\r\n            <div className={styles.inputForm_error}>\r\n                {submitFailed && ((error && <span >{error}</span>) ||\r\n                    (warning && <span className={styles.inputForm_error}>{warning}</span>))}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst ToDoList = (props) => {\r\n    const [filterMode, setFilterMode] = useState(1);\r\n    const [inProp, setInProp] = useState(true);\r\n\r\n    let changeFilter = (filterNumber) => {\r\n        setFilterMode(filterNumber);\r\n        setInProp(!inProp);\r\n    }\r\n\r\n    let undoneTask = props.taskList.filter(item => !item.done)\r\n    let doneTask = props.taskList.filter(item => item.done)\r\n    let allTask = undoneTask.concat(doneTask)\r\n    let resultAllTask = allTask.map((item) => {\r\n        return <Task key={item.id} text={item.text} done={item.done} edit={item.edit}\r\n            stageOfDone={props.stageOfDone} id={item.id}\r\n            deleteTask={props.deleteTask} editTextTask={props.editTextTask} \r\n            date={item.createDateTask.date} time={item.createDateTask.time} />\r\n    })\r\n\r\n    let resultDoneTask = resultAllTask.filter((item) => item.props.done);\r\n    let resultUnDoneTask = resultAllTask.filter((item) => !item.props.done);\r\n    console.log(props)\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.wrapper}>\r\n                <h3 className={styles.tittle}>Лист задач:</h3>\r\n                <div className={styles.filter}>\r\n                    <p className={filterMode == 1 ? styles.filter_active : ''} onClick={() => { changeFilter(1) }}>Все задачи</p>\r\n                    <p className={filterMode == 2 ? styles.filter_active : ''} onClick={() => { changeFilter(2) }} >Активные задачи</p>\r\n                    <p className={filterMode == 3 ? styles.filter_active : ''} onClick={() => { changeFilter(3) }}>Выполненные задачи</p>\r\n                </div>\r\n                <div className={styles.todolist}>\r\n                    <div className={styles.info}>\r\n                        <p className={styles.info_undone}>Активные задачи: <span>{undoneTask.length}</span> </p>\r\n                        <p className={styles.info_done}>Выполненные задачи: <span>{doneTask.length}</span> </p>\r\n                    </div>\r\n                    <form onSubmit={props.handleSubmit} className={styles.formControl}>\r\n                        <Field className={styles.input} name='newTask'\r\n                            component={renderField} validate={[required]} />\r\n                        <button className={styles.addTask}>Добавить</button>\r\n                    </form>\r\n                    <TransitionGroup in={inProp} timeout={500} classNames={{\r\n                        appearActive: styles.myAppearActive,\r\n                        appearDone: styles.myAppearDone,\r\n                        enterActive: styles.myEnterActive,\r\n                        enterDone: styles.myEnterDone,\r\n                        exit: styles.myExit,\r\n                        exitActive: styles.myExitActive,\r\n                        exitDone: styles.myExitDone\r\n                    }} >\r\n                        <CSSTransition>\r\n                            <div className={styles.hhh}>\r\n                                {filterMode == 1 ? resultAllTask : ''}\r\n                                {filterMode == 2 ? resultUnDoneTask : ''}\r\n                                {filterMode == 3 ? resultDoneTask : ''}\r\n                            </div>\r\n                        </CSSTransition>\r\n                    </TransitionGroup >\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default ToDoList","D:\\Desktop\\Web\\to-do-list\\toDoList\\src\\components\\toDoList\\task\\Task.jsx",[],"D:\\Desktop\\Web\\to-do-list\\toDoList\\src\\components\\Redux\\store.js",["50","51"],"import { combineReducers, createStore } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nconst ADD_NEW_TASK = 'ADD_NEW_TASK';\r\nconst STAGE_OF_DONE = 'STAGE_OF_DONE';\r\nconst EDIT_TEXT_TASK = 'EDIT_TEXT_TASK';\r\nconst DELETE_TASK = 'DELETE_TASK';\r\n\r\nexport const addTaskAC = (task) => ({ type: ADD_NEW_TASK, task });\r\nexport const stageOfDoneAC = (idTask) => ({ type: STAGE_OF_DONE, idTask });\r\nexport const editTextTaskAC = (idTask, textTask) => ({ type: EDIT_TEXT_TASK, idTask, textTask })\r\nexport const deleteTaskAC = (idTask) => ({ type: DELETE_TASK, idTask });\r\n\r\nlet localBaseTask = JSON.parse(localStorage.getItem('taskList')) || []\r\n\r\nlet initialState = {\r\n    taskList: [...localBaseTask]\r\n}\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    let stateCopy;\r\n    let date = new Date();\r\n\r\n    let getDate = (date.getDate() < 10) ? '0' + date.getDate(): date.getDate();\r\n    let getMonth = (date.getMonth() < 10) ? '0' + (date.getMonth() + 1): date.getMonth() + 1;\r\n    let createDate = `${getDate}.${getMonth}.${date.getFullYear()}`\r\n\r\n    let getHours = (date.getHours() < 10) ? '0' + date.getHours(): date.getHours();\r\n    let getMinutes = (date.getMinutes() < 10) ? '0' + date.getMinutes(): date.getMinutes();\r\n    let createTime = `${getHours}:${getMinutes}`;\r\n\r\n    switch (action.type) {\r\n        case ADD_NEW_TASK:\r\n            stateCopy = {\r\n                ...state,\r\n                taskList: [...state.taskList]\r\n            }\r\n            const idTask = `f${(~~(Math.random() * 1e8)).toString(16)}`;\r\n            stateCopy.taskList.unshift({ id: idTask, text: action.task, done: false, createDateTask: {date: createDate, time: createTime}});\r\n\r\n            localStorage.setItem('taskList', JSON.stringify(stateCopy.taskList))\r\n            console.log(stateCopy)\r\n            return stateCopy;\r\n        case STAGE_OF_DONE:\r\n            let arr = state.taskList.map((item) => {\r\n                if (item.id == action.idTask) {\r\n                    item.done = !item.done\r\n                }\r\n                return item\r\n            })\r\n            stateCopy = {\r\n                ...state,\r\n                taskList: [...arr]\r\n            }\r\n            localStorage.setItem('taskList', JSON.stringify(arr))\r\n            return stateCopy;\r\n        case EDIT_TEXT_TASK:\r\n\r\n            let arrEditText = state.taskList.map((item) => {\r\n                if (item.id == action.idTask) {\r\n                    item.text = action.textTask;\r\n                    item.createDateTask.time = `ред. ${createTime}`;\r\n                    item.createDateTask.date = createDate;\r\n                }\r\n                return item\r\n            })\r\n            stateCopy = {\r\n                ...state,\r\n                taskList: [...arrEditText]\r\n            }\r\n            localStorage.setItem('taskList', JSON.stringify(arrEditText))\r\n            return stateCopy;\r\n        case DELETE_TASK:\r\n            let arrfilter = state.taskList.filter((item) => {\r\n                return (item.id !== action.idTask) ? true : false\r\n            });\r\n            stateCopy = {\r\n                ...state,\r\n                taskList: [...arrfilter]\r\n            }\r\n\r\n            localStorage.setItem('taskList', JSON.stringify(arrfilter))\r\n\r\n            return stateCopy;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nlet rootReducer = combineReducers({\r\n    app: appReducer,\r\n    form: formReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n\r\nexport default appReducer","D:\\Desktop\\Web\\to-do-list\\toDoList\\src\\components\\fieldLevelValidation\\validation.js",["52","53","54","55"],"import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\n\r\nexport const required = value => (value || typeof value === 'number' ? undefined : 'Поле не может быть пустым')\r\n\r\nconst maxLength = max => value =>\r\n  value && value.length > max ? `Must be ${max} characters or less` : undefined\r\n  \r\nconst maxLength15 = maxLength(15)\r\n\r\nexport const minLength = min => value =>\r\n  value && value.length < min ? `Must be ${min} characters or more` : undefined\r\n\r\nexport const minLength2 = minLength(2)",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":56,"column":46,"nodeType":"62","messageId":"63","endLine":56,"endColumn":48},{"ruleId":"60","severity":1,"message":"61","line":57,"column":46,"nodeType":"62","messageId":"63","endLine":57,"endColumn":48},{"ruleId":"60","severity":1,"message":"61","line":58,"column":46,"nodeType":"62","messageId":"63","endLine":58,"endColumn":48},{"ruleId":"60","severity":1,"message":"61","line":71,"column":37,"nodeType":"62","messageId":"63","endLine":71,"endColumn":39},{"ruleId":"60","severity":1,"message":"61","line":72,"column":37,"nodeType":"62","messageId":"63","endLine":72,"endColumn":39},{"ruleId":"60","severity":1,"message":"61","line":73,"column":37,"nodeType":"62","messageId":"63","endLine":73,"endColumn":39},{"ruleId":"60","severity":1,"message":"61","line":46,"column":29,"nodeType":"62","messageId":"63","endLine":46,"endColumn":31},{"ruleId":"60","severity":1,"message":"61","line":60,"column":29,"nodeType":"62","messageId":"63","endLine":60,"endColumn":31},{"ruleId":"64","severity":1,"message":"65","line":1,"column":8,"nodeType":"66","messageId":"67","endLine":1,"endColumn":13},{"ruleId":"64","severity":1,"message":"68","line":2,"column":10,"nodeType":"66","messageId":"67","endLine":2,"endColumn":15},{"ruleId":"64","severity":1,"message":"69","line":2,"column":17,"nodeType":"66","messageId":"67","endLine":2,"endColumn":26},{"ruleId":"64","severity":1,"message":"70","line":9,"column":7,"nodeType":"66","messageId":"67","endLine":9,"endColumn":18},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'Field' is defined but never used.","'reduxForm' is defined but never used.","'maxLength15' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]